#!/usr/bin/python
#
#################################################################################
## Program:   BRAINS (Brain Research: Analysis of Images, Networks, and Systems)
## Module:    $RCSfile: $
## Language:  Python
## Date:      $Date:  $
## Version:   $Revision: $
##
##   Copyright (c) Iowa Mental Health Clinical Research Center. All rights reserved.
##   See BRAINSCopyright.txt or http:/www.psychiatry.uiowa.edu/HTML/Copyright.html
##   for details.
##
##      This software is distributed WITHOUT ANY WARRANTY; without even
##      the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
##      PURPOSE.  See the above copyright notices for more information.
##
#################################################################################

#import nipype.interfaces.io as nio           # Data i/o
#import nipype.interfaces.spm as spm          # spm
#import nipype.interfaces.matlab as mlab      # how to run matlab
#import nipype.interfaces.fsl as fsl          # fsl
#import nipype.interfaces.utility as util     # utility
#import nipype.algorithms.rapidart as ra      # artifact detection
#import nipype.algorithms.modelgen as model   # model specification
import enthought.traits.api as traits
import nipype.pipeline.engine as pe          # pypeline engine

from nipype.interfaces.base import BaseInterface, TraitedSpec

import brains

BRAINSConstellationDetector=brains.BRAINS4CommandLine(module="/scratch/johnsonhj/src/BRAINS4-buld/bin/BRAINSConstellationDetector")
BRAINSFit=brains.BRAINS4CommandLine(module="/scratch/johnsonhj/src/BRAINS4-buld/bin/BRAINSFit")

import os, sys, string
#import shutil, glob, re

# Set BrainsConfig variables

BRAINS_BIN_DIR=os.environ["BRAINS_BIN_DIR"]

AutoWorkupVersion = "110"
T1ACPCModelFile = BRAINS_BIN_DIR + "/T1.mdl"
T2ACPCModelFile = BRAINS_BIN_DIR + "/T2.mdl"
TalairachDir = BRAINS_BIN_DIR + "/talairach"
EmsAtlasDir = BRAINS_BIN_DIR + "/Atlas/BRAINSABC"
BRAINSABCAtlasDir = BRAINS_BIN_DIR + "/Atlas/Atlas_20101105"
BRAINSANNDir = BRAINS_BIN_DIR + "/Atlas/ANN_2010_Beta"
IplFlag = "1"
GlobalDataDir = "/raid0/data/new_data/brains3"
GtractVersion = "GTRACT_v4.0"

#NOTICE!  This wasn't defined previously!!
EarlierAtlasDir = BRAINSABCAtlasDir

def rootname(path):
  splits = os.path.basename(path).split(".")
  if len(splits) > 1:
    return string.join(splits[:-1], ".")
  else:
    return splits[0]

def extension(path):
  splits = os.path.basename(path).split(".")
  if len(splits) > 1:
    return splits[-1]
  else:
    return ""

def GetExtensionlessBaseName(filename):
  basename = os.path.basename(filename)
  currExt = extension(basename)
  if currExt == "gz":
    return rootname(rootname(basename))
  else:
    return rootname(basename)

def ConstellationBasename(image):
  return os.path.basename(rootname(rootname(image)))

def count_files(list_of_files):
  return range(len(list_of_files))

# ---
# NODE: GenerateT1T2ImageList
#  * Combine a list of T1 and T2 images, and make a separate T1/T2 type list.
#

class GenerateT1T2ImageListInputSpec(TraitedSpec):
  open("/tmp/blah", "a").write("UUUUUU\n")
  T1ImageList = traits.List(type="traits.File", sep=",", exists=True, mandatory=True)
  T2ImageList = traits.List(type="traits.File", sep=",", exists=True, mandatory=True)

class GenerateT1T2ImageListOutputSpec(TraitedSpec):
  open("/tmp/blah", "a").write("VVVVVV\n")
  outputList = traits.List(type="traits.File")
  outputTypesList = traits.List(type="traits.File")

class GenerateT1T2ImageList(BaseInterface):
  open("/tmp/blah", "a").write("WWWWWW\n")
  input_spec = GenerateT1T2ImageListInputSpec
  output_spec = GenerateT1T2ImageListOutputSpec

  def _run_interface(self, runtime):
#    self._outputList = ""
#    self._outputTypesList = ""
    self._outputTypesList = []
    for Image in self.inputs.T1ImageList:
#      self._outputList += "," + Image
#      self._outputTypesList += ",T1"
      self._outputTypesList.append("T1")
    for Image in self.inputs.T2ImageList:
#      self._outputList += "," + Image
#      self._outputTypesList += ",T2"
      self._outputTypesList.append("T2")
#    self._outputList = self._outputList[1:]
    self._outputList = self.inputs.T1ImageList + self.inputs.T2ImageList
#    self._outputTypesList = self._outputTypesList[1:]
    open("/tmp/blah", "a").write("XXXXXX " + str(self._outputList) + "\n")
    runtime.returncode = 0
    return runtime

  def _list_outputs(self):
    open("/tmp/blah", "a").write("YYYYYY " + str(self._outputList) + "\n")
    outputs = self._outputs().get()
    outputs["outputList"] = self._outputList
    outputs["outputTypesList"] = self._outputTypesList
    return outputs

# ---
# NODE: GenerateT1T2ImageList
#  * Figures out what files are generated by BRAINSABC so that we can link them into the pipeline, since BRAINSABC doesn't output them.  :P
#  * !!!!!NOTICE!!!!! :: If BRAINSABC changes what files it needs to generate, this will NOT auto-update!  You must update it here as well.
#

class GenerateCorrectedImageFilenamesInputSpec(TraitedSpec):
  outputDir = traits.Str(exists=True, mandatory=True)
  T1AcpcImageList = traits.List(type="traits.File", sep=",", exists=True, mandatory=True)
  T2AcpcImageList = traits.List(type="traits.File", sep=",", exists=True, mandatory=True)

class GenerateCorrectedImageFilenamesOutputSpec(TraitedSpec):
  T1BaseName = traits.Str()
  T2BaseName = traits.Str()
  T1CorrectedImageFileNames = traits.List(type="traits.File", sep=",")
  T2CorrectedImageFileNames = traits.List(type="traits.File", sep=",")

class GenerateCorrectedImageFilenames(BaseInterface):
  input_spec = GenerateCorrectedImageFilenamesInputSpec
  output_spec = GenerateCorrectedImageFilenamesOutputSpec

  def _run_interface(self, runtime):
    self._T1CorrectedImageFileNames = []
    self._T2CorrectedImageFileNames = []
    for Image in self.inputs.T1AcpcImageList:
      self._T1BaseName = GetExtensionlessBaseName(Image)
      self._T1CorrectedImageFileNames.append(self.inputs.outputDir + "/" + self._T1BaseName + "_corrected_BRAINSABC.nii.gz")
    for Image in self.inputs.T2AcpcImageList:
      self._T2BaseName = GetExtensionlessBaseName(Image)
      self._T2CorrectedImageFileNames.append(self.inputs.outputDir + "/" + self._T2BaseName + "_corrected_BRAINSABC.nii.gz")
    runtime.returncode = 0
    return runtime

  def _list_outputs(self):
     outputs = self._outputs().get()
     outputs["T1BaseName"] = self._T1BaseName
     outputs["T1CorrectedImageFileNames"] = self._T1CorrectedImageFileNames
     outputs["T2BaseName"] = self._T2BaseName
     outputs["T2CorrectedImageFileNames"] = self._T2CorrectedImageFileNames
     return outputs


# ---
# NODE: GenerateBRAINSCutMaps
#  * Creates the image, atlas, and probability maps for BRAINSCut.
#

class GenerateBRAINSCutMapsInputSpec(TraitedSpec):
  resultDir = traits.Str(exists=True, mandatory=True)
  T1Image = traits.File(exists=True, mandatory=True)
  T2Image = traits.File(exists=True, mandatory=True)
  SGImage = traits.File(exists=True, mandatory=True)
  atlasDir = traits.Str(exists=True, mandatory=True)
  scanId = traits.Str(exists=True, mandatory=True)
  annDir= traits.Str(exists=True, mandatory=True)

class GenerateBRAINSCutMapsOutputSpec(TraitedSpec):
  imageMap = traits.Str()
  atlasMap = traits.Str()
  caudateProbabilityMap = traits.Str()
  caudateXml = traits.Str()
  leftCaudate = traits.Str()
  rightCaudate = traits.Str()
  caudateList = traits.Str()
  putamenProbabilityMap = traits.Str()
  putamenXml = traits.Str()
  leftPutamen = traits.Str()
  rightPutamen = traits.Str()
  putamenList = traits.Str()
  thalamusProbabilityMap = traits.Str()
  thalamusXml = traits.Str()
  leftThalamus = traits.Str()
  rightThalamus = traits.Str()
  thalamusList = traits.Str()
  hippocampusProbabilityMap = traits.Str()
  hippocampusXml = traits.Str()
  leftHippocampus = traits.Str()
  rightHippocampus = traits.Str()
  hippocampusList = traits.Str()
  accumbensProbabilityMap = traits.Str()
  accumbensXml = traits.Str()
  leftAccumbens = traits.Str()
  rightAccumbens = traits.Str()
  accumbensList = traits.Str()
  globusProbabilityMap = traits.Str()
  globusXml = traits.Str()
  leftGlobus = traits.Str()
  rightGlobus = traits.Str()
  globusList = traits.Str()

class GenerateBRAINSCutMaps(BaseInterface):
  input_spec = GenerateBRAINSCutMapsInputSpec
  output_spec = GenerateBRAINSCutMapsOutputSpec

  def _run_interface(self, runtime):
    self._imageMap = "T1," + self.inputs.T1Image + ":T2," + self.inputs.T2Image + ":SG," + self.inputs.SGImage
    self._atlasMap = "T1," + self.inputs.atlasDir + "/template_t1.nii.gz:T2,na:SG,na"
    self._caudateProbabilityMap = "l_caudate," + self.inputs.annDir + "/l_caudate_ProbabilityMap.nii.gz:r_caudate," + self.inputs.annDir + "/r_caudate_ProbabilityMap.nii.gz"
    self._caudateXml = self.inputs.resultDir + "/" + self.inputs.scanId + "caudate.xml"
    self._leftCaudate = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_caudate_ANN.nii.gz"
    self._rightCaudate = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_caudate_ANN.nii.gz"
    self._caudateList = self._leftCaudate + "," + self._rightCaudate
    self._putamenProbabilityMap = "l_putamen," + self.inputs.annDir + "/l_putamen_ProbabilityMap.nii.gz:" + "r_putamen," + self.inputs.annDir + "/r_putamen_ProbabilityMap.nii.gz"
    self._putamenXml = self.inputs.resultDir + "/" + self.inputs.scanId + "putamen.xml"
    self._leftPutamen = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_putamen_ANN.nii.gz"
    self._rightPutamen = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_putamen_ANN.nii.gz"
    self._putamenList = self._leftPutamen + "," + self._rightPutamen
    self._thalamusProbabilityMap = "l_thalamus," + self.inputs.annDir + "/l_thalamus_ProbabilityMap.nii.gz:" + "r_thalamus," + self.inputs.annDir + "/r_thalamus_ProbabilityMap.nii.gz"
    self._thalamusXml = self.inputs.resultDir + "/" + self.inputs.scanId + "thalamus.xml"
    self._leftThalamus = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_thalamus_ANN.nii.gz"
    self._rightThalamus = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_thalamus_ANN.nii.gz"
    self._thalamusList = self._leftThalamus + "," + self._rightThalamus
    self._hippocampusProbabilityMap = "l_hippocampus," + self.inputs.annDir + "/l_hippocampus_ProbabilityMap.nii.gz:" + "r_hippocampus," + self.inputs.annDir + "/r_hippocampus_ProbabilityMap.nii.gz"
    self._hippocampusXml = self.inputs.resultDir + "/" + self.inputs.scanId + "hippocampus.xml"
    self._leftHippocampus = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_hippocampus_ANN.nii.gz"
    self._rightHippocampus = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_hippocampus_ANN.nii.gz"
    self._hippocampusList = self._leftHippocampus + "," + self._rightHippocampus
    self._accumbensProbabilityMap = "l_accumbens," + self.inputs.annDir + "/l_accumbens_ProbabilityMap.nii.gz:" + "r_accumbens," + self.inputs.annDir + "/r_accumbens_ProbabilityMap.nii.gz"
    self._accumbensXml = self.inputs.resultDir + "/" + self.inputs.scanId + "accumbens.xml"
    self._leftAccumbens = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_accumbens_ANN.nii.gz"
    self._rightAccumbens = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_accumbens_ANN.nii.gz"
    self._accumbensList = self._leftAccumbens + "," + self._rightAccumbens
    self._globusProbabilityMap = "l_globus," + self.inputs.annDir + "/l_globus_ProbabilityMap.nii.gz:" + "r_globus," + self.inputs.annDir + "/r_globus_ProbabilityMap.nii.gz"
    self._globusXml = self.inputs.resultDir + "/" + self.inputs.scanId + "globus.xml"
    self._leftGlobus = self.inputs.resultDir + "/" + self.inputs.scanId + "_l_globus_ANN.nii.gz"
    self._rightGlobus = self.inputs.resultDir + "/" + self.inputs.scanId + "_r_globus_ANN.nii.gz"
    self._globusList = self._leftGlobus + "," + self._rightGlobus
    runtime.returncode = 0
    return runtime

  def _list_outputs(self):
    outputs = self._outputs().get()
    outputs["imageMap"] = self._imageMap
    outputs["atlasMap"] = self._atlasMap
    outputs["caudateProbabilityMap"] = self._caudateProbabilityMap
    outputs["caudateXml"] = self._caudateXml
    outputs["leftCaudate"] = self._leftCaudate
    outputs["rightCaudate"] = self._rightCaudate
    outputs["caudateList"] = self._caudateList
    outputs["putamenProbabilityMap"] = self._putamenProbabilityMap
    outputs["putamenXml"] = self._putamenXml
    outputs["leftPutamen"] = self._leftPutamen
    outputs["rightPutamen"] = self._rightPutamen
    outputs["putamenList"] = self._putamenList
    outputs["thalamusProbabilityMap"] = self._thalamusProbabilityMap
    outputs["thalamusXml"] = self._thalamusXml
    outputs["leftThalamus"] = self._leftThalamus
    outputs["rightThalamus"] = self._rightThalamus
    outputs["thalamusList"] = self._thalamusList
    outputs["hippocampusProbabilityMap"] = self._hippocampusProbabilityMap
    outputs["hippocampusXml"] = self._hippocampusXml
    outputs["leftHippocampus"] = self._leftHippocampus
    outputs["rightHippocampus"] = self._rightHippocampus
    outputs["hippocampusList"] = self._hippocampusList
    outputs["accumbensProbabilityMap"] = self._accumbensProbabilityMap
    outputs["accumbensXml"] = self._accumbensXml
    outputs["leftAccumbens"] = self._leftAccumbens
    outputs["rightAccumbens"] = self._rightAccumbens
    outputs["accumbensList"] = self._accumbensList
    outputs["globusProbabilityMap"] = self._globusProbabilityMap
    outputs["globusXml"] = self._globusXml
    outputs["leftGlobus"] = self._leftGlobus
    outputs["rightGlobus"] = self._rightGlobus
    outputs["globusList"] = self._globusList
    return outputs


# ---
# Main function

def WorkupANONRAW(ScanDir, Version=110, Mode=10, InterpolationMode="Linear"):

  ScanId = os.path.basename(ScanDir)
  PatientId = os.path.basename(os.path.dirname(ScanDir))

  print [ScanDir, PatientId, ScanId]

  RAWPrefix = ScanDir + "/ANONRAW/" + PatientId + "_" + ScanId
  T1Image = RAWPrefix + "_T1_COR.nii.gz"
  T2Image = RAWPrefix + "_T2_COR.nii.gz"
  InputOtherImages = RAWPrefix + "_PD_COR.nii.gz"
  ImageType = "Nifti"

  if (os.path.exists(T1Image)) and (os.path.exists(T2Image)):
    WorkupT1T2(ScanDir, [ T1Image ], [ T2Image ], Version, InterpolationMode, Mode, [])    # NOTICE: Old DwiList arg was "10", which makes no sense.
  else:
    print "Error: Did not find default T1 (" + T1Image + ") and T2 (" + T2Image + ") images."


def WorkupT1T2(ScanDir, T1Images, T2Images, Version=110, InterpolationMode="Linear", Mode=10, DwiList=[]):

  if len(T1Images) < 1:
    print "ERROR:  Length of T1 image list is 0,  at least one T1 image must be specified."
    sys.exit(-1)
  if len(T2Images) < 1:
    print "ERROR:  Length of T2 image list is 0,  at least one T2 image must be specified."
    sys.exit(-1)

  ScanId = os.path.basename(ScanDir)
  PatientId = os.path.basename(os.path.dirname(ScanDir))

  InputOtherImages = ""
  ## if the first image listed is a directory, assume dicom, else assume nifti
  if os.path.isdir(T1Images[0]):
    ImageType = "DICOM"
    print( "ERROR: DICOM to Nifti conversion not yet supported. {0}".format(T1Images))
    print( "ERROR: DICOM to Nifti conversion not yet supported. {0}".format(T1Images[0]))
    sys.exit(1)
  else:
    ImageType = "Nifti"


  ########################################################
  # Build up directories and file lists.
  ResultDir = ScanDir + "/" + str(Mode) + "_AUTO." + str(Version)
  TalairachResultDir = ResultDir + "/Talairach"
  ANNResultDir = ResultDir + "/ANN"
  Stage1ResultsDir = ResultDir + "/Stage1"
  BRAINSABCResultDir = ResultDir + "/BSITKBRAINSABC"
  WorkDir = ResultDir + "/Surface"
  talairachBoxes = ["nfrontal_box", "temporal_box", "parietal_box", "occipital_box"]
  binaryImageList = []
  binaryImageList_count = []
  regionNameList = []
  talairachBoxFiles = []
  index = 1
  for fileName in talairachBoxes:
    talairachBoxFiles.append(TalairachDir + "/" + fileName)
    binaryImageList.append(TalairachResultDir + "/" + ScanId + "_ACPC_" + fileName + "_seg.nii.gz")
    regionNameList.append(fileName.split()[0])
    binaryImageList_count.append(index)
    index += 1
  BRAINSABCAtlas = BRAINSABCAtlasDir + "/template_t1.nii.gz"
  leftHemisphere = BRAINSABCAtlasDir + "/template_leftHemisphere.nii.gz"
  rightHemisphere = BRAINSABCAtlasDir + "/template_rightHemisphere.nii.gz"
  cerebellumMask = BRAINSABCAtlasDir + "/template_cerebellum.nii.gz"
  ventriclesMask = BRAINSABCAtlasDir + "/template_ventricles.nii.gz"
  i = 1
  DWIBaseDir = "."
  if len(DwiList):
    DWIBaseDir = os.path.dirname(DwiList[0])
  DWIAnalysisDir = DWIBaseDir + "/" + GtractVersion
  nrrdRawFiles = []
  for dir in DwiList:
    nrrdRawFiles.append(DWIAnalysisDir + "/" + ScanId + "_DWI_Raw_Run_%d.nhdr" % i)
    i += 1
  nrrdBaseFiles = []
  nrrdRawFiles = []
  nrrdCoregFiles = []
  DWIOutputTransforms = []
  for i in range(1, len(DwiList) + 1):
    nrrdBaseFiles.append(DWIAnalysisDir + "/" + ScanId + "_DWI_Raw_Run_%d.nhdr" % i)
    nrrdRawFiles.append(DWIAnalysisDir + "/" + ScanId + "_DWI_Raw_Run_%d.nhdr" % i)
    nrrdCoregFiles.append(DWIAnalysisDir + "/" + ScanId + "_DWI_Coreg_Run_%d.nhdr" % i)
    DWIOutputTransforms.append(DWIAnalysisDir + "/" + ScanId + "_DWI_Coreg_Run_%d_Transform.txt" % i)

  ########################################################
  # Make directories
  try:
    os.makedirs(ANNResultDir)
  except OSError:
    pass
  try:
    os.makedirs(Stage1ResultsDir)
  except OSError:
    pass
  try:
    os.makedirs(BRAINSABCResultDir)
  except OSError:
    pass
  try:
    os.makedirs(WorkDir)
  except OSError:
    pass
  try:
    os.makedirs(DWIBaseDir)
  except OSError:
    pass
  try:
    os.makedirs(DWIAnalysisDir)
  except OSError:
    pass
  try:
    os.makedirs(TalairachResultDir)
  except OSError:
    pass

  ########################################################
  # Convert Images if Required
  if ImageType == "DICOM":
    print "ERROR: DICOM to Nifti conversion not yet supported."
    sys.exit(1)

    """
    Stage0ResultsDir = ResultDir + "/Stage0"

    uniq = 0
    for InputT1Image in T1Images:
      T1NiftiImage = Stage0ResultsDir + "/" + ScanId + "_SCAN" + uniq + "_T1.nii.gz"
      uniq += 1
      BRAINSImageConversionT1 = pe.Node(interface=BRAINSImageConversion(), name="BRAINSImageConversionT1")
      BRAINSImageConversionT1.inputs.InputT1Image = InputT1Image
      BRAINSImageConversionT1.inputs.T1NiftiImage = T1NiftiImage
      BRAINSImageConversionT1.inputs.1 = 1
      T1NiftiImageList.append(T1NiftiImage)

    uniq = 0
    for InputT2Image in T2Images:
      T2NiftiImage = Stage0ResultsDir + "/" + ScanId + "_SCAN" + uniq + "_T2.nii.gz"
      uniq += 1
      BRAINSImageConversionT2 = pe.Node(interface=BRAINSImageConversion(), name="BRAINSImageConversionT2")
      BRAINSImageConversionT2.inputs.InputT2Image = InputT2Image
      BRAINSImageConversionT2.inputs.T2NiftiImage = T2NiftiImage
      BRAINSImageConversionT2.inputs.1 = 1
      T2NiftiImageList.append(T2NiftiImage)
    """

  else:
    T1NiftiImageList = T1Images
    T2NiftiImageList = T2Images

  T1Basename = ConstellationBasename(T1NiftiImageList[0])
  T2Basename = ConstellationBasename(T2NiftiImageList[0])

  ########################################################
  # Run ACPC Detect on T1 Images
  ########################################################

  BRAINSConstellationDetectorT1Batch = pe.Node(interface=brains.BRAINS4CommandLine(module="/scratch/johnsonhj/src/BRAINS4-buld/bin/BRAINSConstellationDetector"), name="BRAINSConstellationDetectorT1Batch")
  BRAINSConstellationDetectorT1Batch.inputs.inputTemplateModel = T1ACPCModelFile
  BRAINSConstellationDetectorT1Batch.inputs.resultsDir = Stage1ResultsDir
  BRAINSConstellationDetectorT1Batch.inputs.outputVolume = Stage1ResultsDir + "/" + T1Basename + "_ACPC_InPlace.nii.gz"                #$# T1AcpcImageList
  BRAINSConstellationDetectorT1Batch.inputs.outputTransform = Stage1ResultsDir + "/" + T1Basename + "_ACPC_transform.mat"
  BRAINSConstellationDetectorT1Batch.inputs.outputLandmarksInInputSpace = Stage1ResultsDir + "/" + T1Basename + "_ACPC_Original.fcsv"
  BRAINSConstellationDetectorT1Batch.inputs.outputLandmarksInACPCAlignedSpace = Stage1ResultsDir + "/" + T1Basename + "_ACPC_Landmarks.fcsv"
  BRAINSConstellationDetectorT1Batch.inputs.outputMRML = Stage1ResultsDir + "/" + T1Basename + "_ACPC_Scene.mrml"
  BRAINSConstellationDetectorT1Batch.inputs.interpolationMode = InterpolationMode
  BRAINSConstellationDetectorT1Batch.inputs.houghEyeDetectorMode = 1
  BRAINSConstellationDetectorT1Batch.inputs.acLowerBound = 80
  BRAINSConstellationDetectorT1Batch.inputs.inputVolume =  "/hjohnson/NAMIC/ReferenceAtlas_20110511/template_t1.nii.gz"

  print("XXX: {0}".format(T1NiftiImageList))
  ########### P I P E L I N E   C R E A T I O N #############
  BRAINSConstellationDetectorT1Batch.run()

  test=brains.BRAINS4CommandLine(module="/scratch/johnsonhj/src/BRAINS4-buld/bin/BRAINSFit")
  test.inputs.fixedVolume = "/hjohnson/NAMIC/ReferenceAtlas_20110511/template_t1.nii.gz"
  test.inputs.movingVolume = "/hjohnson/NAMIC/ReferenceAtlas_20110511/template_t2.nii.gz"
  test.inputs.outputTransform = True
  test.inputs.transformType = ["Affine"]
  print test.cmdline
  print test.inputs
  print test._outputs()
  ret = test.run()

  print "**************"
  print ScanDir
  print "**************"
"""
  AWWorkflow = pe.Workflow(name="AW_TEST")
  AWWorkflow.base_dir = ScanDir


  # Entries below are of the form:
  # (node1, node2, [(out_source1, out_dest1), (out_source2, out_dest2), ...])
  AWWorkflow.connect(
BRAINSConstellationDetectorT1Batch, '', [('outputVolume', 'T1ImageList')])
  ])

  AWWorkflow.run()
"""

############################  MAIN
## ../../BRAINS4-buld/Library/Framework/Python.framework/Versions/2.6/bin/python BrainsAutoWorkup.py /hjohnson/NAMIC/ReferenceAtlas_20110511/ /hjohnson/NAMIC/ReferenceAtlas_20110511/template_t1.nii.gz /hjohnson/NAMIC/ReferenceAtlas_20110511/template_t2.nii.gz
OUTDIR=os.path.realpath(sys.argv[1])
T1s=[os.path.realpath(sys.argv[2]) ]
T2s=[os.path.realpath(sys.argv[3]) ]

WorkupT1T2(OUTDIR,T1s,T2s)

##  ../../BRAINS4-buld/Library/Framework/Python.framework/Versions/2.6/bin/python BrainsAutoWorkup.py /hjohnson/NAMIC/ReferenceAtlas_20110511/ /hjohnson/NAMIC/ReferenceAtlas_20110511/template_t1.nii.gz /hjohnson/NAMIC/ReferenceAtlas_20110511/template_t2.nii.gz
